var documenterSearchIndex = {"docs":
[{"location":"cli.html#Intallation-of-the-CLI","page":"CLI","title":"Intallation of the CLI","text":"","category":"section"},{"location":"cli.html","page":"CLI","title":"CLI","text":"If you want to use the command line interface, you can install it by running the following command:","category":"page"},{"location":"cli.html","page":"CLI","title":"CLI","text":"julia> using VibrationalAnalysis\njulia> VibrationalAnalysis.comonicon_install()","category":"page"},{"location":"cli.html","page":"CLI","title":"CLI","text":"Make sure you have ~/.julia/bin in your PATH.","category":"page"},{"location":"cli.html","page":"CLI","title":"CLI","text":"or by running the following command:","category":"page"},{"location":"cli.html","page":"CLI","title":"CLI","text":"julia -e 'using Pkg; Pkg.add(\"VibrationalAnalysis\"); using VibrationalAnalysis; VibrationalAnalysis.comonicon_install()'","category":"page"},{"location":"cli.html","page":"CLI","title":"CLI","text":"or by build the package from in your default environment:","category":"page"},{"location":"cli.html","page":"CLI","title":"CLI","text":"julia> using Pkg\njulia> Pkg.build(\"VibrationalAnalysis\")","category":"page"},{"location":"cli.html#Usage","page":"CLI","title":"Usage","text":"","category":"section"},{"location":"cli.html","page":"CLI","title":"CLI","text":"Run the following command to see the available options:","category":"page"},{"location":"cli.html","page":"CLI","title":"CLI","text":"vibrationalanalysis -h","category":"page"},{"location":"api.html#VibrationalAnalysis-API","page":"API","title":"VibrationalAnalysis API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"VibrationalAnalysis","category":"page"},{"location":"api.html#VibrationalAnalysis","page":"API","title":"VibrationalAnalysis","text":"VibrationalAnalysis.jl\n\nThis module contains functions to perform vibrational analysis on a QMCFC output.\n\nUsage\n\nCan read directly from rst-file, moldescriptor-file and hessian-file and perform vibrational analysis on the system.\n\njulia> read_calculate(\"restart.rst\", \"hessian.dat\", \"moldescriptor.dat\")\n\nOr directly perform a vibrational analysis with atom masses, atom coordinates, atom charges and hessian of the system.\n\njulia> wavenumbers, intensities, _, _ = calculate(atom_masses, atom_coords, atom_charges, hessian)\njulia> write_wavenumber_intensity(wavenumbers, intensities, filename=\"wavenumbers.dat\")\n\n\n\n\n\n","category":"module"},{"location":"api.html#Module-Index","page":"API","title":"Module Index","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [VibrationalAnalysis]","category":"page"},{"location":"api.html#Detailed-API","page":"API","title":"Detailed API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [VibrationalAnalysis]\nPrivate = false","category":"page"},{"location":"api.html#VibrationalAnalysis.VibrationalAnalysis","page":"API","title":"VibrationalAnalysis.VibrationalAnalysis","text":"VibrationalAnalysis.jl\n\nThis module contains functions to perform vibrational analysis on a QMCFC output.\n\nUsage\n\nCan read directly from rst-file, moldescriptor-file and hessian-file and perform vibrational analysis on the system.\n\njulia> read_calculate(\"restart.rst\", \"hessian.dat\", \"moldescriptor.dat\")\n\nOr directly perform a vibrational analysis with atom masses, atom coordinates, atom charges and hessian of the system.\n\njulia> wavenumbers, intensities, _, _ = calculate(atom_masses, atom_coords, atom_charges, hessian)\njulia> write_wavenumber_intensity(wavenumbers, intensities, filename=\"wavenumbers.dat\")\n\n\n\n\n\n","category":"module"},{"location":"api.html#VibrationalAnalysis.calculate-Tuple{Vector{Float64}, Matrix{Float64}, Matrix{Float64}}","page":"API","title":"VibrationalAnalysis.calculate","text":"calculate(atom_masses, atom_coords, hessian)\n\nCalculates the wavenumbers, force constants and reduced masses from the atom masses, atom coordinates, and the hessian.\n\nArguments\n\natom_masses::Vector{Float64}: Vector of atom_masses (n)\natom_coords::Matrix{Float64}: Matrix of atom coordinates (3xn)\nhessian::Matrix{Float64}: Matrix of the hessian (3nx3n)\n\nKeyword Arguments\n\nwavenumber::Function: The wavenumber function to use. Either wavenumber_kcal, wavenumber_eV or wavenumber_hartree. Default is wavenumber_kcal. \n\nReturns\n\nwavenumbers::Vector{Float64}: The wavenumbers.\nforce_constants::Vector{Float64}: The force constants.\nreduced_masses::Vector{Float64}: The reduced masses.\neigenvectors_internal_normalized::Matrix{Float64}: The eigenvectors in internal coordinates.\n\nExample\n\njulia> calculate(atom_masses, atom_coords, hessian)\njulia> calculate(atom_masses, atom_coords, hessian, wavenumber=wavenumber_hartree)\njulia> calculate(atom_masses, atom_coords, hessian, wavenumber=wavenumber_eV)\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.calculate-Tuple{Vector{Float64}, Matrix{Float64}, Vector{Float64}, Matrix{Float64}}","page":"API","title":"VibrationalAnalysis.calculate","text":"calculate(atom_masses, atom_coords, atom_charges, hessian)\n\nCalculates the wavenumbers, intensities, force constants and reduced masses from the atom masses, atom coordinates, atom charges and the hessian.\n\nArguments\n\natom_masses::Vector{Float64}: Vector of atom_masses (n)\natom_coords::Matrix{Float64}: Matrix of atom coordinates (3xn)\natom_charges::Vector{Float64}: Vector of atom charges (n)\nhessian::Matrix{Float64}: Matrix of the hessian (3nx3n)\n\nKeyword Arguments\n\nwavenumber::Function: The wavenumber function to use. Either wavenumber_kcal, wavenumber_eV or wavenumber_hartree. Default is wavenumber_kcal. \n\nReturns\n\nwavenumbers::Vector{Float64}: The wavenumbers.\nintensities::Vector{Float64}: The intensities.\nforce_constants::Vector{Float64}: The force constants.\nreduced_masses::Vector{Float64}: The reduced masses.\neigenvectors_internal_normalized::Matrix{Float64}: The eigenvectors in internal coordinates.\n\nExample\n\njulia> calculate(atom_masses, atom_coords, atom_charges, hessian)\njulia> calculate(atom_masses, atom_coords, atom_charges, hessian, wavenumber=wavenumber_hartree)\njulia> calculate(atom_masses, atom_coords, atom_charges, hessian, wavenumber=wavenumber_eV)\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.read_hessian-Tuple{String}","page":"API","title":"VibrationalAnalysis.read_hessian","text":"read_hessian(hessian_file::String) -> hessian::Matrix{Float64}\n\nReads a hessian file and returns a nxn Matrix of the hessian.\n\nArguments\n\nhessian_file::String: The hessian file.\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.read_moldescriptor-Tuple{String, Vector{String}, Vector{Int64}}","page":"API","title":"VibrationalAnalysis.read_moldescriptor","text":"read_moldescriptor(moldescriptor_file::String) -> atom_charges::Vector{Float64}\n\nReads a moldescriptor file and returns atom_charges.\n\nArguments\n\nmoldescriptor_file::String: The moldescriptor file.\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.read_rst-Tuple{String}","page":"API","title":"VibrationalAnalysis.read_rst","text":"read_rst(rst_file::String) -> atom_names::Vector{String}, atom_masses::Vector{Float64}, atom_coords::Matrix{Float64}, atom_types::Vector{Int64}\n\nReads a restart file and returns a tuple of atom names, masses, and coordinates.\n\nArguments\n\nrst_file::String: The restart file.\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.wavenumber_eV-Tuple{Vector{Float64}}","page":"API","title":"VibrationalAnalysis.wavenumber_eV","text":"wavenumber_eV(eigenvalues::Vector{Float64}) -> wavenumbers::Vector{Float64}, omega::Vector{Float64}\n\nConvert eigenvalues from eV Å^-2 g^-1 to wavenumbers in cm^-1. Made for ASE hessian files. Output include omega in s^-2.\n\nω = v\n\nν = 1(2π * c) * ω\n\nArguments\n\neigenvalues::Vector{Float64}: The eigenvalues.\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.wavenumber_hartree-Tuple{Vector{Float64}}","page":"API","title":"VibrationalAnalysis.wavenumber_hartree","text":"wavenumber_hartree(eigenvalues::Vector{Float64}) -> wavenumbers::Vector{Float64}, omega::Vector{Float64}\n\nConvert eigenvalues from hartree bor^-2 g^-1 to wavenumbers in cm^-1. Made for DFTB hessian files. Output include omega in s^-2.\n\nω = v\n\nν = 1(2π * c) * ω\n\nArguments\n\neigenvalues::Vector{Float64}: The eigenvalues.\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.wavenumber_kcal-Tuple{Vector{Float64}}","page":"API","title":"VibrationalAnalysis.wavenumber_kcal","text":"wavenumber_kcal(eigenvalues::Vector{Float64}) -> wavenumbers::Vector{Float64}, omega::Vector{Float64}\n\nConvert eigenvalues from kcal Å^-2 g^-1 to wavenumbers in cm^-1. Made for QMCFC hessian files. Output include omega in s^-2.\n\nω = v\n\nν = 1(2π * c) * ω\n\nArguments\n\neigenvalues::Vector{Float64}: The eigenvalues.\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.write_calculate_output-NTuple{4, Any}","page":"API","title":"VibrationalAnalysis.write_calculate_output","text":"write_calculate_output(wavenumbers, intensities, force_constants, reduced_masses; filename = stdout)\n\nWrite the wavenumbers, intensities, force constants and reduced masses to a file.\n\nArguments\n\nwavenumbers::Vector{Float64}: The wavenumbers.\nintensities::Vector{Float64}: The intensities.\nforce_constants::Vector{Float64}: The force constants.\nreduced_masses::Vector{Float64}: The reduced masses.\n\nKeyword Arguments\n\nfilename::String: The name of the file. Default is stdout\n\nExample\n\njulia> using VibrationalAnalysis\njulia> write_calculate_output(wavenumbers, intensities, force_constants, reduced_masses)\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.write_calculate_output-Tuple{Any, Any, Any}","page":"API","title":"VibrationalAnalysis.write_calculate_output","text":"write_calculate_output(wavenumbers, force_constants, reduced_masses, eigenvectors_internal_normalized; filename = stdout)\n\nWrite the wavenumbers, force constants and reduced masses to a file.\n\nArguments\n\nwavenumbers::Vector{Float64}: The wavenumbers.\nforce_constants::Vector{Float64}: The force constants.\nreduced_masses::Vector{Float64}: The reduced masses.\n\nKeyword Arguments\n\nfilename::String: The name of the file. Default is stdout.\n\nExample\n\njulia> using VibrationalAnalysis\njulia> write_calculate_output(wavenumbers, force_constants, reduced_masses)\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.write_calculate_output-Tuple{Any, Any}","page":"API","title":"VibrationalAnalysis.write_calculate_output","text":"write_calculate_output(wavenumbers, intensities; filename = stdout)\n\nWrite the wavenumbers and intensities to a file.\n\nArguments\n\nwavenumbers::Vector{Float64}: The wavenumbers.\nintensities::Vector{Float64}: The intensities.\n\nKeyword Arguments\n\nfilename::String: The name of the file. Default is stdout\n\nExample\n\njulia> using VibrationalAnalysis\njulia> write_calculate_output(wavenumbers, intensities)\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.write_modes-Tuple{Matrix{Float64}, Matrix{Float64}, Vector{String}}","page":"API","title":"VibrationalAnalysis.write_modes","text":"write_modes(eigenvectors_internal_normalized, coord, atom_names; filename, amplitude, step)\n\nWrite the modes to a file in xyz format.\n\nArguments\n\neigenvectors_internal_normalized::Matrix{Float64}: The eigenvectors in internal coordinates.\ncoord::Matrix{Float64}: The coordinates of the atoms.\natom_names::Vector{String}: The names of the atoms.\n\nKeyword Arguments\n\nfilename::String: The name of the file. Default is \"modes\".\namplitude::Float64: The amplitude of the mode. Default is 0.25.\nstep::Float64: The step size of the mode. Default is 0.01.\n\nExample\n\njulia> using VibrationalAnalysis\njulia> write_modes(eigenvectors_internal_normalized, atom_coords, atom_names)\nshell> cat modes-1.xyz\n\n\n\n\n\n","category":"method"},{"location":"api.html#VibrationalAnalysis.write_modes-Tuple{Matrix{Float64}}","page":"API","title":"VibrationalAnalysis.write_modes","text":"write_modes(eigenvectors_internal_normalized)\n\nWrite the modes to a file in matrix format.\n\nArguments\n\neigenvector_internal::Matrix{Float64}: The eigenvectors in internal coordinates.\n\nKeyword Arguments\n\nfilename::String: The name of the file. Default is stdout.\n\nExample\n\njulia> using VibrationalAnalysis\njulia> write_modes(eigenvectors_internal_normalized)\nshell> cat modes.dat\n\n\n\n\n\n","category":"method"},{"location":"license.html#License","page":"License","title":"License","text":"","category":"section"},{"location":"license.html","page":"License","title":"License","text":"This software is licensed under the MIT License. See the LICENSE file for more information.","category":"page"},{"location":"license.html","page":"License","title":"License","text":"using Markdown\nMarkdown.parse_file(joinpath(\"..\", \"..\", \"LICENSE\"))","category":"page"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Here are some examples of how to use the VibrationalAnalysis package.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Calculate the vibrational analysis of a molecule from the output of a PQ calculation.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"read_calculate(\"path/to/file.rst\", \"path/to/file.hessian\", \"path/to/file.moldescriptor\")","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Calculate the vibrational analysis by providing the necessary data. Atomic masses, atomic coordinates, atomic charges, and the hessian are the necessary data to calculate the vibrational analysis.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"calculate(atom_masses, atom_coords, atom_charges, hessian)","category":"page"},{"location":"installation.html#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation.html","page":"Installation","title":"Installation","text":"To install the package, open the Julia REPL and type ] to enter the Pkg REPL mode. Then, type the following command:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"julia> ] add VibrationalAnalysis","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"Alternatively, you can install the package using the following command:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(\"VibrationalAnalysis\")","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"This will install the package and all its dependencies. After installation, you can load the package by typing:","category":"page"},{"location":"installation.html","page":"Installation","title":"Installation","text":"julia> using VibrationalAnalysis","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"<img src=\"assets/logo.png\" width=\"250\">","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: codecov) (Image: CI) (Image: TagBot) (Image: DOI)","category":"page"},{"location":"index.html#VibrationalAnalysis.jl","page":"Home","title":"VibrationalAnalysis.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This package provides tools to perform vibrational analysis of molecules. It is based on the output of QMCFC and PQ molecular dynamics codes developed at the University of Innsbruck.","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"To install the package, run the following command in the Julia REPL:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]\npkg> add VibrationalAnalysis","category":"page"},{"location":"index.html#Intallation-of-the-CLI","page":"Home","title":"Intallation of the CLI","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"If you want to use the command line interface, you can install it by running the following command:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> using VibrationalAnalysis\njulia> VibrationalAnalysis.comonicon_install()","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Make sure you have ~/.julia/bin in your PATH.","category":"page"},{"location":"index.html#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"shell> vibrationalanalysis -h","category":"page"},{"location":"index.html#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This package was developed as part of the MolarVerse organization. Significant contributions were made by:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Josef M. Gallmetzer @galjos\nJakob Gamper @97gamjak\nThomas S. Hofer","category":"page"},{"location":"index.html#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"If you use this package in your research, please cite it using the following DOI: 10.5281/zenodo.10829271","category":"page"}]
}
